{"version":3,"sources":["webpack:///src/app/shopping-cart/shopping-cart-routing.module.ts","webpack:///src/app/shopping-cart/shopping-cart.module.ts","webpack:///src/app/shopping-cart/shopping-cart.component.ts","webpack:///src/app/shopping-cart/shopping-cart.component.html","webpack:///src/app/get-products.service.ts"],"names":["routes","path","component","ShoppingCartRoutingModule","forChild","imports","exports","ShoppingCartModule","declarations","providers","src","ShoppingCartComponent","productService","router","_renderer","_elemRef","store","empty","buying","bought","errorBuying","responseMessage","url","setAttribute","nativeElement","listProduct$","select","state","listProducts","products","nbProducts$","getNbProducts","priceProducts$","getFullPriceProducts","product","removeItem","dispatch","subscribe","buyProducts","response","success","data","timer$","t","selector","templateUrl","styleUrls","ProductService","hClient","filteredProducts$","get","api","pipe","next","asObservable","searchTerm","getProducts","filter","isNaN","parseFloat","price","toString","includes","name","toLowerCase","description","id","status","sort","a","b","body","URLSearchParams","forEach","set","post","httpOptions","providedIn"],"mappings":"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","file":"default~catalog-catalog-module~shopping-cart-shopping-cart-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { ShoppingCartComponent } from './shopping-cart.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ShoppingCartComponent\r\n  },\r\n  {\r\n    path: 'products',\r\n    component: ShoppingCartComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ShoppingCartRoutingModule { }\r\n","import { ShoppingCartRoutingModule } from './shopping-cart-routing.module';\r\nimport { ProductState } from '../../shared/states/product-state';\r\nimport { NgxsModule } from '@ngxs/store';\r\nimport { AppModule } from '../app.module';\r\nimport { ShoppingCartComponent } from './shopping-cart.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ShoppingCartComponent,\r\n  ],\r\n  imports: [\r\n    // AppModule,\r\n    CommonModule,\r\n    // NgxsModule,\r\n    // NgxsModule.forRoot([\r\n    //   ProductState\r\n    // ]),\r\n    ShoppingCartRoutingModule\r\n  ],\r\n  providers: [],\r\n  exports: [ShoppingCartComponent],\r\n  // bootstrap: [AppComponent]\r\n})\r\nexport class ShoppingCartModule { }\r\n","import { ProductService } from './../get-products.service';\r\nimport { Product } from './../../shared/models/products';\r\nimport { DelProduct, BuyProduct } from './../../shared/actions/product-action';\r\nimport { ProductState } from './../../shared/states/product-state';\r\nimport { Store } from '@ngxs/store';\r\nimport { Observable, of, timer } from 'rxjs';\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { Component, HostBinding, OnInit, Renderer2, ElementRef } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-shopping-cart',\r\n  templateUrl: './shopping-cart.component.html',\r\n  styleUrls: ['./shopping-cart.component.scss'],\r\n\r\n})\r\nexport class ShoppingCartComponent implements OnInit {\r\n\r\n  listProduct$: Observable<Product>;\r\n  nbProducts$: Observable<number>;\r\n  priceProducts$: Observable<number>;\r\n  products: Product[];\r\n  // @HostBinding('class.homeLogo') isHome:boolean = false;\r\n  public empty: boolean = true;\r\n  public buying:boolean = false;\r\n  public bought: boolean = false;\r\n  public errorBuying: boolean = false;\r\n  ;\r\n  public responseMessage: string=null;\r\n  \r\n  constructor(private productService: ProductService, private router: Router, private _renderer: Renderer2, private _elemRef : ElementRef, private store: Store) {\r\n    // i want different styles depending on the route, since the shopping cart is shown on the store page (like amazon)\r\n    if(this.router.url == '/cart') {\r\n      this._renderer.setAttribute(this._elemRef.nativeElement, 'id','shopping-cart-page' );\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    \r\n    this.listProduct$ = this.store.select(state => state.listProducts.products);\r\n    // Solution 1\r\n    this.nbProducts$ = this.store.select(ProductState.getNbProducts);\r\n    this.priceProducts$ = this.store.select(ProductState.getFullPriceProducts);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n  onClickRemove(product) {\r\n    this.removeItem(product);\r\n  }\r\n  removeItem(product) {\r\n    this.store.dispatch(new DelProduct(product));\r\n  }\r\n\r\n  buyProducts(products) {\r\n    products.subscribe(products => this.products = products);\r\n    this.buying = true;\r\n    this.productService.buyProducts(this.products).subscribe((response) => {\r\n      if(response.success)\r\n      {\r\n        this.bought = true;\r\n        this.store.dispatch(new BuyProduct(products));\r\n      }\r\n      else {\r\n        this.errorBuying = true;\r\n      }\r\n      this.responseMessage = response.data;\r\n    })\r\n    let timer$ = timer(3000);\r\n    timer$.subscribe(t=> {\r\n      this.buying = false;\r\n    });\r\n  }\r\n}\r\n","<div>\r\n\r\n    <div class=\"cart-content\">\r\n        <h1 class=\"cart-title\">Your Cart <i class=\"fa fa-shopping-cart\" aria-hidden=\"true\"></i></h1>\r\n        <div class=\"cart-list\">\r\n            <span *ngIf=\"!(nbProducts$ |async)\">Your cart is empty... <i class=\"fa fa-frown-o smiley-face\" aria-hidden=\"true\"></i></span>\r\n            <div class=\"cart-product-list cart-container\">\r\n                <p>Total products : {{ nbProducts$ | async }} | Price : {{ priceProducts$ | async}}€</p>\r\n                <div class=\"cart-page-recap\">\r\n                    <div>\r\n                        <h3>Recap</h3>\r\n                    </div>\r\n                    <div class=\"cart-recap-info\">\r\n                        <span>Total products : {{nbProducts$ | async}}</span>\r\n                        <span>Total amount : {{priceProducts$ | async}}€ </span>\r\n                        <button (click)=\"buyProducts(listProduct$)\" [disabled]=\"!(nbProducts$| async )\">Go to checkout</button>\r\n                    </div>\r\n                </div>\r\n                <div class=\"cart-product-list\">\r\n                    <div *ngFor=\"let item of (listProduct$ | async)\" class=\"cart-product\">\r\n                        <div class=\"cart-product-img\">\r\n                            <img class=\"product-img\" src=\"../../assets/img/{{item.src}}\" />\r\n                        </div>\r\n                        <div class=\"cart-product-info\">\r\n                            <h4>{{ item.name }}</h4>\r\n                            <div class=\"cart-product-actions\">\r\n                                <span>{{ item.price }}€</span>\r\n                                <button class=\"btn-delete\" (click)=\"onClickRemove(item)\"><i class=\"fa fa-trash\"> </i></button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div *ngIf=\"buying\" class=\"shopping-cart-buying\">\r\n    <div *ngIf=\"!bought && !errorBuying\">\r\n        <span><i class=\"fa fa-spin fa-spinner\"></i> Purchasing items...</span>\r\n    </div>\r\n    <div *ngIf=\"bought\">Items purchased for {{responseMessage}}€</div>\r\n    <div *ngIf=\"errorBuying\">{{responseMessage}}</div>\r\n</div>","import { ApiService } from './api.service';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { HttpClientModule, HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { Product } from '../shared/models/products';\r\nimport { Observable, of, ReplaySubject, Subject, throwError } from 'rxjs';\r\nimport { environment } from '../environments/environment';\r\nimport { catchError, tap, map, filter} from 'rxjs/operators';\r\n@Injectable(\r\n  {\r\n  providedIn: 'root'\r\n  }\r\n)\r\nexport class ProductService extends ApiService {\r\n\r\n  constructor(private hClient: HttpClient) {\r\n    super(hClient);\r\n   }\r\n\r\n  private products: Product[];\r\n  private filteredProducts$: Subject<Product[]> = new ReplaySubject<Product[]>(1);\r\n\r\n  public getProducts(): Observable<Product[]> {\r\n    // return cached products\r\n    if (this.products) {\r\n      return of(this.products);\r\n    }\r\n    // fetch and cache products\r\n    return this.hClient.get(environment.api + '/product/all').pipe(\r\n      tap((data : any) => {\r\n        this.products = data.data;\r\n        this.filteredProducts$.next(this.products);\r\n      }\r\n      )\r\n    );\r\n  }\r\n\r\n  getSearchResults(): Observable<Product[]> {\r\n    return this.filteredProducts$.asObservable();\r\n  }\r\n\r\n  searchProduct(searchTerm: any): Observable<void> {\r\n    return this.getProducts().pipe(\r\n      // using tap to update the stream without changing any data\r\n      tap((products: any) => {\r\n        products = products.filter(product => {\r\n          if(!isNaN(parseFloat(searchTerm)))\r\n          {\r\n            return product.price.toString().includes(searchTerm.toString());\r\n          }\r\n          else {\r\n            return product.name.toLowerCase().includes(searchTerm) || product.description.toLowerCase().includes(searchTerm)\r\n          }\r\n        });\r\n        // updating the stream\r\n        this.filteredProducts$.next(products);\r\n      }),\r\n      map(() => void 0)\r\n    );\r\n  }\r\n\r\n  public getSingleProduct(id): Observable<any> {\r\n    return this.hClient.get(environment.api + '/product/' + id).pipe(\r\n      tap((data : Product) => {\r\n        this.products = data[0];\r\n      })\r\n    );\r\n  }\r\n\r\n\r\n\r\n  priceFilter(status: number): Observable<any[]> {\r\n    return this.getProducts().pipe(\r\n      tap((products : any) => {\r\n        products = products.sort((a,b) => {\r\n          switch (status) {\r\n            case 0:\r\n              return a.price < b.price ? -1 : 1;\r\n              break;\r\n            case 1:\r\n              return a.price > b.price ? -1 : 1;\r\n              break;\r\n            }\r\n        });\r\n        this.filteredProducts$.next(products);\r\n      }\r\n      ),\r\n      map(() => void 0)\r\n      );\r\n  }\r\n\r\n  nameFilter(status : number): Observable<any[]> {\r\n    return this.getProducts().pipe(\r\n      tap((products : any) => {\r\n        products = products.sort((a,b) => {\r\n          switch(status) {\r\n            case 0:\r\n              return a.name < b.name  ? -1 : 1;\r\n              break;\r\n            case 1:\r\n              return a.name > b.name ? -1 : 1;\r\n              break;\r\n          }\r\n        });\r\n        this.filteredProducts$.next(products);\r\n      }),\r\n      map(() => void 0)\r\n    );\r\n  }\r\n\r\n\r\n  buyProducts(products: Product[]) : Observable<any> {\r\n    const  body = new URLSearchParams();\r\n    let price = 0;\r\n    products.forEach(product => {\r\n      price += product.price;\r\n    })\r\n    body.set(\"price\", price.toString());\r\n    return this.hClient.post(environment.api + '/product/buy',body.toString(), this.httpOptions).pipe(\r\n      map((data) => data)\r\n    );\r\n  }\r\n\r\n}\r\n"]}