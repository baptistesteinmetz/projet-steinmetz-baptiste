{"version":3,"sources":["webpack:///src/app/user-account/recap/recap.component.ts","webpack:///src/app/user-account/recap/recap.component.html","webpack:///src/app/user-account/header-form/header-form.component.ts","webpack:///src/app/user-account/header-form/header-form.component.html","webpack:///src/app/user-account/footer-form/footer-form.component.ts","webpack:///src/app/user-account/footer-form/footer-form.component.html","webpack:///src/app/user-account/form/form.component.ts","webpack:///src/app/user-account/form/form.component.html","webpack:///src/app/customvalidators.validator.ts","webpack:///src/app/customdirectives.directive.ts","webpack:///src/app/user-account/login/login.component.ts","webpack:///src/app/user-account/login/login.component.html","webpack:///src/app/user-account/user-account.module.ts","webpack:///src/app/user-account/user-account-routing.module.ts","webpack:///src/app/user.service.ts"],"names":["PhonePipe","rawNum","charAt","substring","newStr","i","Math","floor","length","substr","name","CodePipe","country","RecapComponent","store","userService","fb","user","formValidate","formModify","clickModify","clickDelete","errorSignIn","errorMessage","select","getUser","subscribe","data","deleteUser","response","success","dispatch","logOffUser","initForm","form","group","firstname","required","pattern","lastname","city","zipcode","phone","address","login","mail","gender","password","confirmPassword","validator","fieldName","controls","invalid","dirty","touched","event","preventDefault","value","valid","updateUser","selector","templateUrl","styleUrls","HeaderFormComponent","FooterComponent","FormComponent","userstore","user$","waiting","userTab","logged","JSON","stringify","addUser","host","ComparePassword","controlName","matchingControlName","formGroup","control","matchingControl","errors","mustMatch","setErrors","ValidateString","str","match","validString","ErrorInputDirective","templateRef","viewContainer","renderer","el","condition","createEmbeddedView","clear","ccErrorInput","LoginComponent","apiService","errorLogIn","loggedUser","setJWT","logUser","UserAccountModule","declarations","imports","providers","routes","path","component","UserAccountRoutingModule","forChild","exports","UserService","hClient","u","body","URLSearchParams","set","post","api","toString","httpOptions","pipe","idUser","log","pwd","providedIn"],"mappings":"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","file":"user-account-user-account-module-es5.js","sourcesContent":["import { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { DelUser, LogOffUser, AddUser } from './../../../shared/actions/user-action';\r\nimport { UserService } from './../../user.service';\r\nimport { tap } from 'rxjs/operators';\r\nimport { UserState } from './../../../shared/states/user-state';\r\nimport { Observable } from 'rxjs';\r\nimport { Store } from '@ngxs/store';\r\nimport { Component, EventEmitter, Input, OnInit, Output, Pipe, PipeTransform } from '@angular/core';\r\nimport { FormComponent } from '../form/form.component';\r\nimport { User } from '../../../shared/models/User';\r\nimport { ComparePassword } from 'src/app/customvalidators.validator';\r\n\r\n@Pipe({\r\n  name: 'phone'\r\n})\r\nexport class PhonePipe implements PipeTransform {\r\n  transform(rawNum) {\r\n    rawNum = rawNum.charAt(0) !== 0 ? rawNum.substring(1) : '' + rawNum.substring(1);\r\n    let newStr = '';\r\n    let i = 0;\r\n    for (; i < Math.floor(rawNum.length / 2) - 1; i++) {\r\n      newStr = newStr + rawNum.substr(i * 2, 2) + '-';\r\n    }\r\n\r\n    return newStr + rawNum.substr(i * 2);\r\n  }\r\n}\r\n\r\n@Pipe({\r\n  name: 'callcode'\r\n})\r\nexport class CodePipe implements PipeTransform {\r\n  transform(country) {\r\n    switch(country) {\r\n      case 'fr' :\r\n        return '+33';\r\n        break;\r\n      case 'en' :\r\n        return '+44';\r\n        break;\r\n      case 'gr' :\r\n        return '+49';\r\n        break;\r\n      case 'us' :\r\n        return '+1';\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-recap',\r\n  templateUrl: './recap.component.html',\r\n  styleUrls: ['./recap.component.scss']\r\n})\r\n\r\nexport class RecapComponent implements OnInit {\r\n  user: User = new User();\r\n\r\n  form: FormGroup;\r\n\r\n  @Input () formValidate: boolean = false;\r\n  @Input () formModify: boolean = false;\r\n  public clickModify:boolean = false;\r\n  public clickDelete:boolean = false;\r\n  public errorSignIn: boolean = false;\r\n  public errorMessage: string = null;\r\n  user$: Observable<User>;\r\n\r\n  constructor(private store: Store, private userService: UserService, private fb: FormBuilder) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if(this.formValidate)\r\n    {\r\n      this.store.select(UserState.getUser).subscribe(\r\n        (data) => {this.user = data;}\r\n      );\r\n    }\r\n  }\r\n  // @Input () userName: string;\r\n\r\n  onDelete(user: User): void {\r\n    this.userService.deleteUser(user).subscribe((response) => {\r\n      if(response.success) {\r\n        this.store.dispatch(new DelUser(user));\r\n        this.formValidate = false;\r\n      }\r\n    })\r\n  }\r\n\r\n  onLogOff(user: User): void {\r\n    this.userService.logOffUser(user).subscribe((response) => {\r\n      if(response.success) {\r\n        this.store.dispatch(new LogOffUser(user));\r\n        this.formValidate = false;\r\n      }\r\n    })\r\n  }\r\n  onModifyAccount(user: User): void {\r\n       this.initForm();\r\n      this.formModify = true;\r\n      this.clickModify = true;\r\n  }\r\n  onClickDelete(): void {\r\n      this.clickDelete = true;\r\n      this.clickModify = true;\r\n  }\r\n\r\n  initForm(): void {\r\n    this.form = this.fb.group(\r\n      {\r\n      firstname: [null, [\r\n        Validators.required,\r\n        Validators.pattern('^[A-Za-z]+$')]],\r\n      lastname: [null, [\r\n        Validators.required,\r\n        Validators.pattern('^[A-Za-z]+$')\r\n      ]],\r\n      city: [null, Validators.required],\r\n      zipcode: [null, [\r\n        Validators.pattern('^[0-9]+$'),\r\n        Validators.required,\r\n      ]\r\n    ],\r\n      phone: [null, [\r\n        Validators.pattern('^[0-9]+$'),\r\n        Validators.required,\r\n      ]],\r\n      address: [null, Validators.required],\r\n      login: [null, Validators.required],\r\n      mail: [null,\r\n        [\r\n          Validators.required,\r\n          Validators.pattern('^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$')\r\n        ]\r\n      ],\r\n      gender: [null, Validators.required],\r\n      country: [null, Validators.required],\r\n      password: [null, Validators.required],\r\n      confirmPassword: [null, Validators.required]\r\n    },\r\n    {\r\n      validator: ComparePassword('password', 'confirmPassword')\r\n    }\r\n    );\r\n  }\r\n\r\n  get f() {\r\n    return this.form.controls;\r\n  }\r\n\r\n\r\n  isValidInput(fieldName): boolean {\r\n    return this.form.controls[fieldName].invalid &&\r\n      (this.form.controls[fieldName].dirty || this.form.controls[fieldName].touched);\r\n  }\r\n\r\n  modifyUser(event) {\r\n    event.preventDefault();\r\n    this.clickModify = true;\r\n    this.user.firstname = this.form.value.firstname;\r\n    if (this.form.valid) {\r\n      this.userService.updateUser(this.user).subscribe((response) => {\r\n        if(response.success)\r\n        {\r\n          this.store.dispatch(new AddUser(response.data));\r\n          this.formValidate=true;\r\n          this.formModify=false;\r\n          this.clickModify = false;\r\n\r\n        }\r\n        else {\r\n        }\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n  return() {\r\n    this.formModify = false;\r\n    this.clickModify = false;\r\n  }\r\n}\r\n","<div *ngIf=\"formValidate\">\r\n    <div class=\"user-card\" [ngClass]=\"{'user-boy': user.gender == 'Man', 'user-girl':user.gender == 'Woman', 'user-other':user.gender == 'Other'}\">\r\n        <div class=\"user-card-header\">\r\n            <p>Welcome {{user.firstname}}, here's your account information!</p>\r\n        </div>\r\n        <div class=\"user-card-info\" *ngIf=\"!formModify\">\r\n            <div>\r\n                <p>{{user.firstname}} {{user.lastname}}\r\n                    <span *ngIf=\"user.gender == 'Man'\">♂\r\n         </span>\r\n                    <span *ngIf=\"user.gender == 'Woman'\">♀\r\n         </span>\r\n                    <span *ngIf=\"user.gender == 'Other'\">⚧\r\n                </span>\r\n                </p>\r\n                <p>{{user.login}}</p>\r\n                <p>{{user.mail}}</p>\r\n            </div>\r\n            <div class=\"user-card-address\">\r\n                <div>\r\n                    <p>{{user.address}}, {{user.city}}, {{user.zipcode}}</p>\r\n                    <p *ngIf=\"user.phone\"> {{user.country | callcode}} {{user.phone | phone }}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <form *ngIf=\"formModify\" [formGroup]=\"form\" (ngSubmit)=\"modifyUser($event)\">\r\n            <div class=\"c-input\">\r\n                <div class=\"c-input-one\">\r\n                    <label for=\"lastname\">Lastname:</label>\r\n                    <input [(ngModel)]=\"user.lastname\" formControlName=\"lastname\" type=\"text\" id=\"lastname\" name=\"lastname\">\r\n                    <div *ccErrorInput=\"!isValidInput('lastname')\">\r\n                        <span class=\"err-input\" *ngIf=\"f.lastname.errors && f.lastname.errors.required\">Required</span>\r\n                        <span class=\"err-input\" *ngIf=\"f.lastname.errors.pattern\">\r\n                  Must be a valid name format.\r\n                </span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"c-input-one\">\r\n                    <label for=\"firstname\">Firstname:</label>\r\n                    <input type=\"text\" [(ngModel)]=\"user.firstname\" formControlName=\"firstname\" id=\"firstname\" name=\"firstname\">\r\n                    <div *ngIf=\"isValidInput('firstname')\">\r\n                        <span class=\"err-input\" *ngIf=\"f.firstname.errors && f.firstname.errors.required\">Required</span>\r\n                        <span class=\"err-input\" *ngIf=\"f.firstname.errors.pattern\">\r\n                Must be a valid name format.\r\n              </span>\r\n                    </div>\r\n                </div>\r\n                <div class=\"c-input-one\">\r\n                    <label for=\"gender\">Gender:</label>\r\n                    <select [(ngModel)]=\"user.gender\" formControlName=\"gender\" id=\"gender\" name=\"gender\">\r\n              <option value=\"Man\" selected>M</option>\r\n              <option value=\"Woman\">F</option>\r\n              <option value=\"Other\">Other</option>\r\n            </select>\r\n                    <div *ngIf=\"isValidInput('firstname')\">\r\n                        <span class=\"err-input\" *ngIf=\"f.firstname.errors && f.firstname.errors.required\">Required</span>\r\n                        <span class=\"err-input\" *ngIf=\"f.firstname.errors.pattern\">\r\n                Must be a valid name format.\r\n              </span>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n            <div class=\"c-input\">\r\n                <div class=\"c-input-one\">\r\n                    <label for=\"name\">City:</label>\r\n                    <input formControlName=\"city\" [(ngModel)]=\"user.city\" type=\"text\" id=\"city\" name=\"namcitye\">\r\n                    <div *ngIf=\"isValidInput('city')\">\r\n                        <span class=\"err-input\" *ngIf=\"f.city.errors && f.city.errors.required\">Required</span>\r\n                        <span class=\"err-input\" *ngIf=\"f.city.errors.pattern\">\r\n                  Must be a valid city format.\r\n                </span>\r\n                    </div>\r\n                </div>\r\n                <div class=\"c-input-one\">\r\n                    <label for=\"name\">Zipcode (5 char):</label>\r\n                    <input formControlName=\"zipcode\" [(ngModel)]=\"user.zipcode\" type=\"text\" id=\"zip\" name=\"zip\" minlength=\"5\" maxlength=\"5\" size=\"5\">\r\n                    <div *ngIf=\"isValidInput('zipcode')\">\r\n                        <span class=\"err-input\" *ngIf=\"f.zipcode.errors && f.zipcode.errors.required\">Required</span>\r\n                        <span class=\"err-input\" *ngIf=\"f.zipcode.errors.pattern\">\r\n                  Must be a valid zipcode format.\r\n                </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"c-input-one\">\r\n                <label for=\"address\">Address:</label>\r\n                <input formControlName=\"address\" [(ngModel)]=\"user.address\" type=\"text\" id=\"address\" name=\"address\">\r\n                <div *ngIf=\"isValidInput('address')\">\r\n                    <span class=\"err-input\" *ngIf=\"f.address.errors && f.address.errors.required\">Required</span>\r\n                    <span class=\"err-input\" *ngIf=\"f.address.errors.pattern\">\r\n                Must be a valid address format.\r\n              </span>\r\n                </div>\r\n            </div>\r\n            <div class=\"c-input-one\">\r\n                <label for=\"phone\">Phone number:</label>\r\n                <div>\r\n                    <select [(ngModel)]=\"user.country\" formControlName=\"country\" id=\"country\" name=\"country\">\r\n                <option value=\"fr\" selected>fr</option>\r\n                <option value=\"en\" >en</option>\r\n                <option value=\"us\">us</option>\r\n                <option value=\"gr\">gr</option>\r\n              </select>\r\n                    <input formControlName=\"phone\" [(ngModel)]=\"user.phone\" type=\"text\" id=\"phone\" name=\"phone\" maxlength=\"10\">\r\n                    <div *ngIf=\"isValidInput('phone')\">\r\n                        <span class=\"err-input\" *ngIf=\"f.phone.errors && f.phone.errors.required\">Required</span>\r\n                        <span class=\"err-input\" *ngIf=\"f.phone.errors.pattern\">\r\n                    Must be a valid phone format.\r\n                  </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"separator\"></div>\r\n\r\n            <div class=\"c-input-one\">\r\n                <label for=\"mail\">Login :</label>\r\n                <input formControlName=\"login\" [(ngModel)]=\"user.login\" type=\"text\" id=\"login\" name=\"login\">\r\n                <div *ngIf=\"isValidInput('login')\">\r\n                    <span class=\"err-input\" *ngIf=\"f.login.errors && f.login.errors.required\">Required</span>\r\n                    <span class=\"err-input\" *ngIf=\"f.login.errors.pattern\">\r\n              Must be a valid login format.\r\n            </span>\r\n                </div>\r\n            </div>\r\n            <div class=\"c-input-one\">\r\n                <label for=\"mail\">Mail :</label>\r\n                <input formControlName=\"mail\" [(ngModel)]=\"user.mail\" type=\"text\" id=\"mail\" name=\"mail\">\r\n                <div *ngIf=\"isValidInput('mail')\">\r\n                    <span class=\"err-input\" *ngIf=\"f.mail.errors && f.mail.errors.required\">Required</span>\r\n                    <span class=\"err-input\" *ngIf=\"f.mail.errors.pattern\">\r\n                Must be a valid mail format.\r\n              </span>\r\n                </div>\r\n            </div>\r\n            <div class=\"c-input-one\">\r\n                <label for=\"pass\">Password:</label>\r\n                <input formControlName=\"password\" [(ngModel)]=\"user.password\" type=\"password\" id=\"password\" name=\"password\">\r\n                <div *ngIf=\"isValidInput('password')\">\r\n                    <div *ngIf=\"f.password.errors &&  f.password.errors.required\">Required</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"c-input-one\">\r\n                <label for=\"confirm-pass\">Confirm password:</label>\r\n                <input type=\"password\" id=\"confirm-pass\" name=\"confirm-pass\" formControlName=\"confirmPassword\" required>\r\n                <div *ngIf=\"isValidInput('confirmPassword')\">\r\n                    <span class=\"err-input\" *ngIf=\"!f.confirmPassword && f.confirmPassword.errors.required\">Confirmation password is required</span>\r\n                    <span class=\"err-input\" *ngIf=\"f.confirmPassword.errors.mustMatch\">Passwords should match</span>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"separator\"></div>\r\n\r\n            <div class=\"c-input btn-container\">\r\n                <button class=\"user-btn-btn\" *ngIf=\"!waiting\" type=\"submit\" value=\"Modifier\" [disabled]=\"!form.valid\">\r\n                    Update\r\n                </button>\r\n                <button class=\"user-btn-btn\" *ngIf=\"!waiting\" (click)=\"return()\" value=\"Modifier\">\r\n                    Return\r\n                </button>\r\n                <i *ngIf=\"waiting\" class=\"fa fa-spin fa-spinner\" aria-hidden=\"true\"></i>\r\n                <div *ngIf=\"errorSignIn\"><i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i> {{errorMessage}}</div>\r\n\r\n            </div>\r\n        </form>\r\n\r\n\r\n        <div class=\"user-card-ok\">\r\n        </div>\r\n\r\n\r\n    </div>\r\n\r\n    <div *ngIf=\"!clickModify\" class=\"user-btn-cnt\">\r\n        <button class=\"user-btn-btn\" (click)=\"onLogOff(user)\" value=\"Logoff\">\r\n            Log Off\r\n        </button>\r\n        <button class=\"user-btn-btn\" (click)=\"onModifyAccount(user)\" value=\"Logoff\">\r\n            Update Account\r\n        </button>\r\n        <button class=\"user-btn-btn\" (click)=\"onClickDelete()\" value=\"Supprimer\">\r\n            Delete account\r\n        </button>\r\n    </div>\r\n    <div *ngIf=\"clickDelete\" class=\"user-btn-cnt\">\r\n        <button class=\"user-btn-btn\" (click)=\"onDelete(user)\" value=\"Supprimer\">\r\n            Confirm delete\r\n        </button>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-header-form',\r\n  templateUrl: './header-form.component.html',\r\n  styleUrls: ['./header-form.component.scss']\r\n})\r\nexport class HeaderFormComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div id=\"header\">\r\n    <h2>Sign in</h2>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-footer-form',\r\n  templateUrl: './footer-form.component.html',\r\n  styleUrls: ['./footer-form.component.scss']\r\n})\r\nexport class FooterComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div id=\"footer-bar\">\r\n</div>\r\n\r\n","import { UserStateModel } from './../../../shared/states/user-state-model';\r\nimport { UserState } from './../../../shared/states/user-state';\r\nimport { AddUser } from './../../../shared/actions/user-action';\r\nimport { Store } from '@ngxs/store';\r\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\r\nimport { UserService } from './../../user.service';\r\nimport { getLocaleDirection } from '@angular/common';\r\nimport { Component, Pipe, Directive, ElementRef, EventEmitter, Input, OnInit, Output, PipeTransform } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, Validators, ReactiveFormsModule, Form } from '@angular/forms';\r\nimport {\r\n  ComparePassword,\r\n  ValidateString\r\n} from '../../customvalidators.validator';\r\n\r\nimport {\r\n  ErrorInputDirective,\r\n} from './../../customdirectives.directive';\r\nimport { User } from '../../../shared/models/User';\r\nimport { ɵEmptyOutletComponent } from '@angular/router';\r\nimport { cpuUsage } from 'process';\r\n\r\n@Component({\r\n  selector: 'app-form',\r\n  // class:'component-form',\r\n  templateUrl: './form.component.html',\r\n  styleUrls: ['./form.component.scss'],\r\n  host: {'id':'component-form'},\r\n})\r\n\r\n\r\nexport class FormComponent implements OnInit, Validators {\r\n  public user = new User();\r\n\r\n  public user$: Subject<User[]> = new ReplaySubject<User[]>(1);\r\n\r\n  form: FormGroup;\r\n  public formValidate: boolean = false;\r\n  public formModify: boolean = false;\r\n  public errorSignIn: boolean = false;\r\n  public errorMessage: string = null;\r\n  public waiting: boolean = false;\r\n\r\n  userTab: User[] = [];\r\n  logged: User = new User();\r\n  currentUser$: Observable<User>;\r\n\r\n  // @Input() userName: string = this.user.firstname;\r\n\r\n  constructor(private fb: FormBuilder, private userService: UserService, private userstore: Store) {\r\n    // this.user.gender = 'Man';\r\n    // this.user.country = 'fr';\r\n    // this.user.firstname = 'Baptiste';\r\n    // this.user.lastname = 'Steinmetz';\r\n    // this.user.mail = 'baptiste@mail.mail';\r\n    // this.user.phone = '0619735555';\r\n    // this.user.login = 'baptiste67';\r\n    // this.user.password = 'baptiste';\r\n    // this.user.address = '1 rue saint léon';\r\n    // this.user.zipcode = '67700';\r\n    // this.user.city = 'saverne';\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n    // don't want another route, the account should always lead to current user once he has submitted form\r\n    this.userstore.select(UserState.getUser).subscribe((data) => {\r\n      if (JSON.stringify(data) !== JSON.stringify({})) {\r\n        this.formValidate=true;\r\n      }\r\n      if(!data) this.formValidate = false;\r\n    });\r\n  }\r\n\r\n  initForm(): void {\r\n    this.form = this.fb.group(\r\n      {\r\n      firstname: [null, [\r\n        Validators.required,\r\n        Validators.pattern('^[A-Za-z]+$')]],\r\n      lastname: [null, [\r\n        Validators.required,\r\n        Validators.pattern('^[A-Za-z]+$')\r\n      ]],\r\n      city: [null, Validators.required],\r\n      zipcode: [null, [\r\n        Validators.pattern('^[0-9]+$'),\r\n        Validators.required,\r\n      ]\r\n    ],\r\n      phone: [null, [\r\n        Validators.pattern('^[0-9]+$'),\r\n        Validators.required,\r\n      ]],\r\n      address: [null, Validators.required],\r\n      login: [null, Validators.required],\r\n      mail: [null,\r\n        [\r\n          Validators.required,\r\n          Validators.pattern('^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$')\r\n        ]\r\n      ],\r\n      gender: [null, Validators.required],\r\n      country: [null, Validators.required],\r\n      password: [null, Validators.required],\r\n      confirmPassword: [null, Validators.required]\r\n    },\r\n    {\r\n      validator: ComparePassword('password', 'confirmPassword')\r\n    }\r\n    );\r\n  }\r\n\r\n  get f() {\r\n    return this.form.controls;\r\n  }\r\n\r\n\r\n  isValidInput(fieldName): boolean {\r\n    return this.form.controls[fieldName].invalid &&\r\n      (this.form.controls[fieldName].dirty || this.form.controls[fieldName].touched);\r\n  }\r\n\r\n  onSubmit(event) {\r\n    event.preventDefault();\r\n    this.waiting = true;\r\n    this.user.firstname = this.form.value.firstname;\r\n    if (this.form.valid) {\r\n      this.userService.addUser(this.user).subscribe((response) => {\r\n        if(response.success)\r\n        {\r\n          this.userstore.dispatch(new AddUser(response.data));\r\n          this.formValidate=true;\r\n          this.waiting = false;\r\n        }\r\n        else {\r\n          this.waiting = false;\r\n          this.errorSignIn = true;\r\n          this.errorMessage = response.data;\r\n        }\r\n      });\r\n\r\n    }\r\n  }\r\n}\r\n","<!-- <p>form works!</p>  -->\r\n<!-- <span> {{ user.firstname }} </span> -->\r\n<div id=\"section-main\">\r\n    <div id=\"section-form\" *ngIf=\"!formValidate\" (formValidate)=\"formValidate = $event\">\r\n        <app-header-form></app-header-form>\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit($event)\">\r\n            <div class=\"c-input\">\r\n                <div class=\"c-input-one\">\r\n                    <label for=\"lastname\">Lastname:</label>\r\n                    <input [(ngModel)]=\"user.lastname\" formControlName=\"lastname\" type=\"text\" id=\"lastname\" name=\"lastname\">\r\n                    <div *ccErrorInput=\"!isValidInput('lastname')\">\r\n                        <span class=\"err-input\" *ngIf=\"f.lastname.errors && f.lastname.errors.required\">Required</span>\r\n                        <span class=\"err-input\" *ngIf=\"f.lastname.errors.pattern\">\r\n                  Must be a valid name format.\r\n                </span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"c-input-one\">\r\n                    <label for=\"firstname\">Firstname:</label>\r\n                    <input type=\"text\" [(ngModel)]=\"user.firstname\" formControlName=\"firstname\" id=\"firstname\" name=\"firstname\">\r\n                    <div *ngIf=\"isValidInput('firstname')\">\r\n                        <span class=\"err-input\" *ngIf=\"f.firstname.errors && f.firstname.errors.required\">Required</span>\r\n                        <span class=\"err-input\" *ngIf=\"f.firstname.errors.pattern\">\r\n                Must be a valid name format.\r\n              </span>\r\n                    </div>\r\n                </div>\r\n                <div class=\"c-input-one\">\r\n                    <label for=\"gender\">Gender:</label>\r\n                    <select [(ngModel)]=\"user.gender\" formControlName=\"gender\" id=\"gender\" name=\"gender\">\r\n              <option value=\"Man\" selected>M</option>\r\n              <option value=\"Woman\">F</option>\r\n              <option value=\"Other\">Other</option>\r\n            </select>\r\n                    <div *ngIf=\"isValidInput('firstname')\">\r\n                        <span class=\"err-input\" *ngIf=\"f.firstname.errors && f.firstname.errors.required\">Required</span>\r\n                        <span class=\"err-input\" *ngIf=\"f.firstname.errors.pattern\">\r\n                Must be a valid name format.\r\n              </span>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n            <div class=\"c-input\">\r\n                <div class=\"c-input-one\">\r\n                    <label for=\"name\">City:</label>\r\n                    <input formControlName=\"city\" [(ngModel)]=\"user.city\" type=\"text\" id=\"city\" name=\"namcitye\">\r\n                    <div *ngIf=\"isValidInput('city')\">\r\n                        <span class=\"err-input\" *ngIf=\"f.city.errors && f.city.errors.required\">Required</span>\r\n                        <span class=\"err-input\" *ngIf=\"f.city.errors.pattern\">\r\n                  Must be a valid city format.\r\n                </span>\r\n                    </div>\r\n                </div>\r\n                <div class=\"c-input-one\">\r\n                    <label for=\"name\">Zipcode (5 char):</label>\r\n                    <input formControlName=\"zipcode\" [(ngModel)]=\"user.zipcode\" type=\"text\" id=\"zip\" name=\"zip\" minlength=\"5\" maxlength=\"5\" size=\"5\">\r\n                    <div *ngIf=\"isValidInput('zipcode')\">\r\n                        <span class=\"err-input\" *ngIf=\"f.zipcode.errors && f.zipcode.errors.required\">Required</span>\r\n                        <span class=\"err-input\" *ngIf=\"f.zipcode.errors.pattern\">\r\n                  Must be a valid zipcode format.\r\n                </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"c-input-one\">\r\n                <label for=\"address\">Address:</label>\r\n                <input formControlName=\"address\" [(ngModel)]=\"user.address\" type=\"text\" id=\"address\" name=\"address\">\r\n                <div *ngIf=\"isValidInput('address')\">\r\n                    <span class=\"err-input\" *ngIf=\"f.address.errors && f.address.errors.required\">Required</span>\r\n                    <span class=\"err-input\" *ngIf=\"f.address.errors.pattern\">\r\n                Must be a valid address format.\r\n              </span>\r\n                </div>\r\n            </div>\r\n            <div class=\"c-input-one\">\r\n                <label for=\"phone\">Phone number:</label>\r\n                <div>\r\n                    <select [(ngModel)]=\"user.country\" formControlName=\"country\" id=\"country\" name=\"country\">\r\n                <option value=\"fr\" selected>fr</option>\r\n                <option value=\"en\" >en</option>\r\n                <option value=\"us\">us</option>\r\n                <option value=\"gr\">gr</option>\r\n              </select>\r\n                    <input formControlName=\"phone\" [(ngModel)]=\"user.phone\" type=\"text\" id=\"phone\" name=\"phone\" maxlength=\"10\">\r\n                    <div *ngIf=\"isValidInput('phone')\">\r\n                        <span class=\"err-input\" *ngIf=\"f.phone.errors && f.phone.errors.required\">Required</span>\r\n                        <span class=\"err-input\" *ngIf=\"f.phone.errors.pattern\">\r\n                    Must be a valid phone format.\r\n                  </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"separator\"></div>\r\n\r\n            <div class=\"c-input-one\">\r\n                <label for=\"mail\">Login :</label>\r\n                <input formControlName=\"login\" [(ngModel)]=\"user.login\" type=\"text\" id=\"login\" name=\"login\">\r\n                <div *ngIf=\"isValidInput('login')\">\r\n                    <span class=\"err-input\" *ngIf=\"f.login.errors && f.login.errors.required\">Required</span>\r\n                    <span class=\"err-input\" *ngIf=\"f.login.errors.pattern\">\r\n              Must be a valid login format.\r\n            </span>\r\n                </div>\r\n            </div>\r\n            <div class=\"c-input-one\">\r\n                <label for=\"mail\">Mail :</label>\r\n                <input formControlName=\"mail\" [(ngModel)]=\"user.mail\" type=\"text\" id=\"mail\" name=\"mail\">\r\n                <div *ngIf=\"isValidInput('mail')\">\r\n                    <span class=\"err-input\" *ngIf=\"f.mail.errors && f.mail.errors.required\">Required</span>\r\n                    <span class=\"err-input\" *ngIf=\"f.mail.errors.pattern\">\r\n                Must be a valid mail format.\r\n              </span>\r\n                </div>\r\n            </div>\r\n            <div class=\"c-input-one\">\r\n                <label for=\"pass\">Password:</label>\r\n                <input formControlName=\"password\" [(ngModel)]=\"user.password\" type=\"password\" id=\"password\" name=\"password\">\r\n                <div *ngIf=\"isValidInput('password')\">\r\n                    <div *ngIf=\"f.password.errors &&  f.password.errors.required\">Required</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"c-input-one\">\r\n                <label for=\"confirm-pass\">Confirm password:</label>\r\n                <input type=\"password\" id=\"confirm-pass\" name=\"confirm-pass\" formControlName=\"confirmPassword\" required>\r\n                <div *ngIf=\"isValidInput('confirmPassword')\">\r\n                    <span class=\"err-input\" *ngIf=\"!f.confirmPassword && f.confirmPassword.errors.required\">Confirmation password is required</span>\r\n                    <span class=\"err-input\" *ngIf=\"f.confirmPassword.errors.mustMatch\">Passwords should match</span>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"separator\"></div>\r\n\r\n            <div class=\"c-input btn-container\">\r\n                <button *ngIf=\"!waiting\" type=\"submit\" class=\"validate\" value=\"Valider\" [disabled]=\"!form.valid\">\r\n              Submit\r\n            </button>\r\n                <i *ngIf=\"waiting\" class=\"fa fa-spin fa-spinner\" aria-hidden=\"true\"></i>\r\n            </div>\r\n        </form>\r\n\r\n        <app-footer-form>\r\n            <div *ngIf=\"errorSignIn\"><i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i> {{errorMessage}}</div>\r\n        </app-footer-form>\r\n    </div>\r\n    <div id=\"section-log-in\" *ngIf=\"!formValidate\">\r\n        <app-login></app-login>\r\n    </div>\r\n    <div *ngIf=\"formValidate\" id=\"section-recap\">\r\n        <app-recap [formValidate]=\"formValidate\"></app-recap>\r\n    </div>\r\n</div>","import { FormGroup, AbstractControl } from '@angular/forms';\r\n\r\n// To validate password and confirm password\r\nexport function ComparePassword(\r\n  controlName: string,\r\n  matchingControlName: string\r\n) {\r\n  return (formGroup: FormGroup) => {\r\n    const control = formGroup.controls[controlName];\r\n    const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n    if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n      return;\r\n    }\r\n\r\n    if (control.value !== matchingControl.value) {\r\n      matchingControl.setErrors({ mustMatch: true });\r\n    } else {\r\n      matchingControl.setErrors(null);\r\n    }\r\n  };\r\n}\r\n\r\nexport function ValidateString(str: string) {\r\n  if (str.match('/^[A-Z]+$/i') ) {\r\n    return { validString: true };\r\n  }\r\n  return null;\r\n}\r\n\r\n\r\n","import { element } from 'protractor';\r\nimport { Directive, Input, TemplateRef, ViewContainerRef, ElementRef, Renderer2 } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[ccErrorInput]'\r\n})\r\n\r\nexport class ErrorInputDirective {\r\n\r\n  // ErrClass: boolean = false;\r\n\r\n  constructor(private templateRef: TemplateRef<any>,\r\n              private viewContainer: ViewContainerRef,\r\n              private renderer: Renderer2,\r\n              private el: ElementRef) {}\r\n\r\n  @Input() set ccErrorInput(condition: boolean){\r\n    if (!condition){\r\n      this.viewContainer.createEmbeddedView(this.templateRef);\r\n    }\r\n    else {\r\n      this.viewContainer.clear();\r\n    }\r\n  }\r\n\r\n}\r\n","import { User } from './../../../shared/models/User';\r\nimport { AddUser } from './../../../shared/actions/user-action';\r\nimport { Store } from '@ngxs/store';\r\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\r\nimport { UserService } from './../../user.service';\r\nimport { ApiService } from './../../api.service';\r\nimport { getLocaleDirection } from '@angular/common';\r\nimport { Component, Pipe, Directive, ElementRef, EventEmitter, Input, OnInit, Output, PipeTransform } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, Validators, ReactiveFormsModule, Form } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  form: FormGroup;\r\n  public password: string;\r\n  public login: string;\r\n  public logged: boolean = false;\r\n  public waiting: boolean = false;\r\n  public errorLogIn :boolean = false;\r\n  public errorMessage:string = null;\r\n  public loggedUser:User = new User();\r\n\r\n\r\n  constructor(private fb: FormBuilder, private userService: UserService, private apiService: ApiService, private userstore: Store) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.form = this.fb.group({\r\n      login: [null, Validators.required],\r\n      password: [null, Validators.required],\r\n    });\r\n  }\r\n\r\n  onSubmit(event)\r\n  {\r\n    this.waiting = true;\r\n    this.errorLogIn = false;\r\n    this.apiService.setJWT();\r\n    this.userService.logUser(this.login, this.password).subscribe((response) => {\r\n      // add user to connect store\r\n      if(response.success == true) {\r\n        this.loggedUser = response.data;\r\n        this.userstore.dispatch(new AddUser(this.loggedUser));\r\n        this.errorMessage = null;\r\n      }\r\n      else {\r\n        this.waiting = false;\r\n        this.login = null;\r\n        this.password = null;\r\n        this.errorLogIn = true;\r\n        this.errorMessage = response.data;\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit($event)\" *ngIf=\"!this.logged\">\r\n    <div class=\"header\">\r\n        <h2>Login</h2>\r\n    </div>\r\n    <div class=\"c-input-one\">\r\n        <label for=\"mail\">Login :</label>\r\n        <input formControlName=\"login\" [(ngModel)]=\"login\" type=\"text\" id=\"login\" name=\"login\">\r\n\r\n    </div>\r\n    <div class=\"c-input\">\r\n\r\n        <div class=\"c-input-one\">\r\n            <label for=\"pass\">Password:</label>\r\n            <input formControlName=\"password\" [(ngModel)]=\"password\" type=\"password\" id=\"password\" name=\"password\">\r\n\r\n        </div>\r\n        <div class=\"separator\"></div>\r\n\r\n        <div class=\"c-input btn-container\">\r\n            <button type=\"submit\" *ngIf=\"!waiting\" class=\"validate\" value=\"Valider\" [disabled]=\"!form.valid\">\r\n                Submit\r\n            </button>\r\n            <i *ngIf=\"waiting\" class=\"fa fa-spin fa-spinner\" aria-hidden=\"true\"></i>\r\n\r\n        </div>\r\n        <div class=\"footer\">\r\n            <div *ngIf=\"errorLogIn\"><i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i> {{errorMessage}}</div>\r\n        </div>\r\n    </div>\r\n</form>","import { LoginComponent } from './login/login.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UserAccountRoutingModule } from './user-account-routing.module';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AppModule } from './../app.module';\r\nimport { ErrorInputDirective } from './../customdirectives.directive';\r\nimport { RecapComponent, PhonePipe, CodePipe } from './../user-account/recap/recap.component';\r\nimport { FormComponent } from './../user-account/form/form.component';\r\nimport { FooterComponent } from './../user-account/footer-form/footer-form.component';\r\nimport { HeaderFormComponent } from './header-form/header-form.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FooterComponent,\r\n    FormComponent,\r\n    HeaderFormComponent,\r\n    RecapComponent,\r\n    LoginComponent,\r\n    ErrorInputDirective,\r\n    PhonePipe,\r\n    CodePipe,\r\n  ],\r\n  imports: [\r\n    // AppModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    UserAccountRoutingModule\r\n  ],\r\n  providers: [],\r\n  // bootstrap: [AppComponent]\r\n})\r\n\r\n\r\nexport class UserAccountModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { FormComponent } from './form/form.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: FormComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UserAccountRoutingModule { }\r\n","import { environment } from './../environments/environment';\r\nimport { ApiService } from './api.service';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { HttpClientModule, HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { User } from '../shared/models/User';\r\nimport { Observable, of, ReplaySubject, Subject, throwError } from 'rxjs';\r\nimport { catchError, tap, map, filter} from 'rxjs/operators';\r\n\r\n@Injectable(\r\n  {\r\n  providedIn: 'root'\r\n  }\r\n)\r\nexport class UserService extends ApiService {\r\n  constructor(private hClient: HttpClient) {\r\n    super(hClient);\r\n   }\r\n\r\n  private users: User[];\r\n\r\n  public addUser(u: User): Observable<any> {\r\n    const  body = new URLSearchParams();\r\n    body.set('firstname', u.firstname);\r\n    body.set('lastname', u.lastname);\r\n    body.set('address', u.address);\r\n    body.set('zipcode', u.zipcode);\r\n    body.set('city', u.city);\r\n    body.set('gender', u.gender);\r\n    body.set('mail', u.mail);\r\n    body.set('password', u.password);\r\n    body.set('login', u.login);\r\n    body.set('country', u.country);\r\n    body.set('phone', u.phone);\r\n\r\n    return this.hClient.post<any>(environment.api + '/user/register', body.toString(), this.httpOptions).pipe(\r\n      map((response) =>\r\n      response\r\n     )\r\n    );\r\n  }\r\n  public updateUser(u: User): Observable<any> {\r\n    const  body = new URLSearchParams();\r\n    body.set('idUser', u.idUser.toString());\r\n    body.set('firstname', u.firstname);\r\n    body.set('lastname', u.lastname);\r\n    body.set('address', u.address);\r\n    body.set('zipcode', u.zipcode);\r\n    body.set('city', u.city);\r\n    body.set('gender', u.gender);\r\n    body.set('mail', u.mail);\r\n    body.set('password', u.password);\r\n    body.set('login', u.login);\r\n    body.set('country', u.country);\r\n    body.set('phone', u.phone);\r\n\r\n    return this.hClient.post<any>(environment.api + '/user/update', body.toString(), this.httpOptions).pipe(\r\n      map((response) => response)\r\n    );\r\n  }\r\n  public deleteUser(u: User): Observable<any> {\r\n    const  body = new URLSearchParams();\r\n    body.set('idUser', u.idUser.toString());\r\n\r\n    return this.hClient.post<any>(environment.api + '/user/delete', body.toString(), this.httpOptions).pipe(\r\n      map((response) => response)\r\n    );\r\n  }\r\n\r\n  public logUser(log: string, pwd: string) : Observable<any> {\r\n    const  body = new URLSearchParams();\r\n    body.set('login', log);\r\n    body.set('password',pwd);\r\n    return this.hClient.post<any>(environment.api + '/user/login', body.toString(), this.httpOptions).pipe(\r\n      tap((response) => response)\r\n    );\r\n  }\r\n\r\n  public logOffUser(u: User) : Observable<any> {\r\n    const  body = new URLSearchParams();\r\n    body.set('idUser', u.idUser.toString());\r\n    return this.hClient.post<any>(environment.api + '/user/logoff', body.toString(), this.httpOptions).pipe(\r\n      map((response) => response)\r\n    );\r\n  }\r\n\r\n}\r\n"]}